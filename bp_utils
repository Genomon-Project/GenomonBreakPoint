#! /usr/bin/env python

from bp_utils.run import *
import argparse

####################
# top level parser
parser = argparse.ArgumentParser(prog = "bp_utils", formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument("--version", action = "version", version = "bp_utils-0.1.0")

subparsers = parser.add_subparsers()

####################


####################
# GenomonSV parse
parse = subparsers.add_parser("parse", 
                              help = "Parse and cluster supporting read pairs for candidate breakpoints",
                              formatter_class=argparse.ArgumentDefaultsHelpFormatter)
 
parse.add_argument("bam_file", metavar = "input.bam", type = str,
                   help = "path to input bam file")

parse.add_argument("output_file", metavar = "output_file", type = str,
                   help = "path to output file")

parse.add_argument("--debug", default = False, action = 'store_true', help = "keep intermediate files")

parse.add_argument("--key_seq_size", type = int, default = 8,
                   help = "size of junction bases on breakpoint to classify the breakpoint (default: %(default)s)")

parse.add_argument("--min_major_clip_size", type = int, default = 15,
                   help = "minimum number of clipped bases for junction read (default: %(default)s)")

parse.add_argument("--max_minor_clip_size", type = int, default = 15,
                   help = "if the clipped bases numbers of both sides are greater than this value, then the read is filtered out (default: %(default)s)")

parse.add_argument("--check_interval", type = int, default = 1000000,
                   help = "the default value will work for most cases. but when memory flows, please try reducing this value (default: %(default)s)")

parse.set_defaults(func = parse_main)
####################   

"""
####################
# GenomonSV filt
filt_parser = subparsers.add_parser("filt", 
                                     help = "Filter candidate structural variations")

filt_parser.add_argument("bam_file", metavar = "input.bam", type = str,
                         help = "path to input bam file")

filt_parser.add_argument("output_prefix", metavar = "output_prefix", type = str,
                         help = "prefix of the pathes of output files")

filt_parser.add_argument("reference_genome", metavar = "reference.fa", type = str,
                         help = "the path to the reference genomoe sequence")

filt_parser.add_argument("annotation_dir", metavar = "annotation_dir", type = str,
                         help = "the path to database directory")

filt_parser.add_argument("--matched_control_bam", metavar = "matched_control.bam", default = "", type = str,
                         help = "path to matched control bam file")

filt_parser.add_argument("--non_matched_control_junction", metavar = "merged.junction.control.bedpe.gz", default = "", type = str,
                         help = "path to the non-matched control panel data generated by merge stage")

filt_parser.add_argument("--matched_control_label", default = "", type = str,
                         help = "matched control sample label (junction read pairs of this label is ignored in the non-matched control filtering step)")

filt_parser.add_argument("--debug", default = False, action = 'store_true', help = "keep intermediate files")


filter_condition_group = filt_parser.add_argument_group("filter_condition",
                                                         "parameters used in various filtering steps in GenomonSV filt command")

filter_condition_group.add_argument("--min_junc_num", type = int, default = 3,
                                   help = "minimum required number of supporting junction read pairs (default: %(default)s)")

filter_condition_group.add_argument("--min_sv_size", type = int, default = 10,
                                   help = "minimum structural variation size (default: %(default)s)")

filter_condition_group.add_argument("--min_inversion_size", type = int, default = 500,
                                    help = "minimum inversion size (default: %(default)s)")

filter_condition_group.add_argument("--control_panel_num_thres", type = int, default = 2,
                                    help = "acceptable number of supporting junction read pairs in any of non-matched control samples (default: %(default)s)")

filter_condition_group.add_argument("--control_panel_check_margin", type = int, default = 40,
                                    help = "positions of junction slip very large (sometimes over 20bp). The author thinks this value should be at least 30bp, but may be more (default: %(default)s)")

filter_condition_group.add_argument("--min_support_num", type = int, default = 3,
                                    help = "mininum required number of supporting read pairs (both junction read pairs and improper read pairs) (default: %(default)s)")

filter_condition_group.add_argument("--min_mapping_qual", type = int, default = 40,
                                    help = "threshold of mapping quality (if the median of supporting reads is below this value, then filtered out) (default: %(default)s)")

filter_condition_group.add_argument("--min_overhang_size", type = int, default = 50,
                                    help = "minimum region size arround each break-point which have to be covered by at least one aligned short read (default: %(default)s)")

filter_condition_group.add_argument("--close_check_margin", type = int, default = 25,
                                    help = "check size for removing duplicated candidates (produced by alignment artifacts). The author believes 25 should be enough (default: %(default)s)")

filter_condition_group.add_argument("--close_check_thres", type = int, default = 2,
                                    help = "if the #{breakpoint-containing read pairs} of the putative duplicated candidate is below this value, remove it (default: %(default)s)")


realignment_condition_group = filt_parser.add_argument_group("realignment_condition",
                                                                    "parameters used in realignment filtering steps in GenomonSV filt command")

realignment_condition_group.add_argument("--max_depth", type = int, default = 5000,
                                         help = "candidates having coverages more than specified value are ignored (default: %(default)s)")

realignment_condition_group.add_argument("--search_length", type = int, default = 1000,
                                         help = "read pairs within the specified length from the breakpoint will be checked (default: %(default)s)")

realignment_condition_group.add_argument("--search_margin", type = int, default = 5,
                                         help = "read pairs in the opposite side to the breakpoint within the specified length will be checked (default: %(default)s)")

realignment_condition_group.add_argument("--split_refernece_thres", type = int, default = 1000,
                                         help = "threshould for splitting the validation sequences (with variant) (default: %(default)s)")

realignment_condition_group.add_argument("--validate_sequence_length", type = int, default = 1000,
                                        help = "length of sequences for validation (each from the breakpoint) (default: %(default)s)")

realignment_condition_group.add_argument("--short_tandem_reapeat_thres", type = int, default = 500,
                                         help = "threshold for identifying short tandem duplication length (since STD has slightly different approach for realignment validation), \
                                                 this value should be significantly larger than the read length (default: %(default)s)")

realignment_condition_group.add_argument("--blat_option", type = str, default = "-stepSize=5 -repMatch=2253",
                                         help = "option used in blat")

realignment_condition_group.add_argument("--min_tumor_variant_read_pair", type = int, default = 3,
                                         help = "minimum required number of read pairs in tumor sample (default: %(default)s)")

realignment_condition_group.add_argument("--min_tumor_allele_freq", type = float, default = 0.01,
                                         help = "minimum required allele frequency of the tumor sample (default: %(default)s)")

realignment_condition_group.add_argument("--max_control_variant_read_pair", type = int, default = 1,
                                         help = "maximum allowed number of read pairs in matched control sample (default: %(default)s)")

realignment_condition_group.add_argument("--max_control_allele_freq", type = float, default = 0.10,
                                         help = "maximum allowed allele frequency of normal sample (default: %(default)s)")

realignment_condition_group.add_argument("--max_fisher_pvalue", type = float, default = 0.10,
                                         help = "maximum allowed fisher's exact test p-value (default: %(default)s)")


filt_parser.set_defaults(func = genomonSV_filt)
####################


####################
# GenomonSV merge 
merge_parser = subparsers.add_parser("merge",
                                     help = "Merge clustered junction files for filtering")

merge_parser.add_argument("control_info_file", metavar = "control_info.txt", type = str,
                          help = "tab-delimited file on non-matched control. 1st column: sample labels, 2nd column: output prefix generated at the parse stage")

merge_parser.add_argument("merge_output_file", type = str,
                          help = "the path to the merged junction file")

merge_parser.add_argument("--debug", default = False, action = 'store_true', help = "keep intermediate files")

merge_parser.add_argument("--merge_check_margin_size", type = int, default = 100,
                         help = "this value should be at least 50 (more than the length of possible inserted sequence between break points)")


merge_parser.set_defaults(func = genomonSV_merge)
####################
"""

args = parser.parse_args()

args.func(args)          
